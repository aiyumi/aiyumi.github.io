<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Aiyumi.Warpstar.Net (linux)</title><link>http://aiyumi.warpstar.net/</link><description></description><atom:link href="http://aiyumi.warpstar.net/en/tag/linux.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 02 Dec 2015 18:31:53 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The Power of SlackBuilds</title><link>http://aiyumi.warpstar.net/en/blog/power-of-slackbuilds/</link><dc:creator>Aiyumi</dc:creator><description>&lt;div&gt;&lt;p&gt;I love SlackBuilds, the scripts to compile programs and create packages for Slackware. I was amazed after reading a great article explaining the advantages of using SlackBuilds VS. manually compiling with "./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install". Unfortunately, the page is gone (it was the site of a Slackware based Brazilian distro called GoblinX, which then became ImagineOS but sadly stopped being updated).&lt;/p&gt;
&lt;p&gt;The other day, I got a message from a person trying to use my scripts for &lt;a href="http://aiyumi.warpstar.net/en/blog/installing-orca-on-slackware-14-0"&gt;installing Orca on Slackware&lt;/a&gt; (which I updated to work with 14.1, by the way!), with doubts about SlackBuilds in general. So I decided to explain, and this was the answer I gave him:&lt;/p&gt;
&lt;p&gt;Basically, a SlackBuild is just a Shell script that sets some common variables (like which architecture your machine is), applies some patches if needed, and specifies which options to pass to "./configure" (like telling we'd like the binaries installed in "/usr/bin" and the libraries in "/usr/lib", instead of "/usr/local/bin" and "/usr/local/lib" which are usually the defaults if you don't specify it in "./configure"). It copies the documentation files to the appropriate places, compiles the program, then packages everything into a ".tgz" or ".txz" (if you use, for example, "tar -tf packagename.tgz" to view its contents, you'll notice that it's like the directory structure of your filesystem, with "usr/bin" etc., compressed with Tar and Gzip). These packages are very easy to install with "installpkg". When a package is installed, a file with the name of the package minus the ".t?z" extension is put in "/var/log/packages" listing all files that were installed with that program. And (one of the things I like the most), they're also very easy to uninstall with "removepkg". If the program was compiled with just "./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install" manually without the SlackBuild (therefore not packaged and not tracked in "/var/log/packages"), it's much harder to know which files were installed where, and for removing them, the easiest way is to go to the directory with the program's source (having to download the source code again if we don't have it anymore, do "./configure" with the same options we used to install it the first time - if we remember what was passed, that is :P - to generate the makefile again), then use "make uninstall" (and guess what? Not every program with "make install" also has the "make uninstall" option! So, can you imagine the problem?)... Whereas if we had installed it through a Slackware package, we could remove it just by doing "removepkg packagename", and Slackware's package tools would take care of finding and removing the files correctly. In other words, it's wonderful :D.&lt;/p&gt;
&lt;p&gt;This occurred to me later, so I didn't send it in the answer. Some people like to use programs like Checkinstall, which monitors "make install"'s output to find out where the files ended up, then creates an installable package (it supports many distros, including Slackware), but personally I prefer using SlackBuilds (even though it myght be a bit more work to create a script if I can't find one for the program I want) because it serves as an organized way to document the options and steps to compile the program, very useful when needing to upgrade and compile it again.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><guid>http://aiyumi.warpstar.net/en/blog/power-of-slackbuilds/</guid><pubDate>Thu, 16 Jan 2014 23:38:15 GMT</pubDate></item><item><title>Installing Orca on Slackware 14.0</title><link>http://aiyumi.warpstar.net/en/blog/installing-orca-on-slackware-14-0/</link><dc:creator>Aiyumi</dc:creator><description>&lt;div&gt;&lt;p&gt;I was taking a look at Slackware Current, which now contains the packages that will be in the next version (14.1, if the name doesn't change like what happened with 13.37). I was very surprised to see that AT-SPI2-Core and AT-SPI2-ATK, two very important dependencies for the &lt;a href="https://live.gnome.org/Orca"&gt;Orca screen reader&lt;/a&gt;, have been included, and their versions are even newer than mine! But I think these weren't added because of accessibility considerations (some other new packages must have these libs as dependencies), since a few SlackBuilds important to Orca still are "./configured" with "--disable-introspection" and "--disable-accessibility" (when I installed Orca on my current system, I had a lot of headaches until I found out that the packages came configured like that by default. I had to enable those options and recompile the programs). Even so, each new Slackware version, more of Orca's dependencies are being incorporated into the default packages. Maybe in just a few versions from now, all (or almost all) of Orca's dependencies will finally have been fulfilled. While this doesn't happen, I gathered the SlackBuilds to compile Orca and its dependencies, and &lt;a href="https://github.com/aiyumi/slackware-scripts"&gt;uploaded them to Github&lt;/a&gt;. Some are mine (because I didn't find ready scripts for those programs anywhere else), while others are copies of the scripts from &lt;a href="http://www.slackbuilds.org/"&gt;Slackbuilds.org&lt;/a&gt; or of things provided in Slackware (for the few programs that needed tweaking and recompiling), everything gathered in only one place to make life easier. These aren't the latest versions, but the specific versions that work with the Slackware 14.0 stock libraries (building the newest packages would require compiling a lot of extra things and would be much more work). For those wondering about having to install Gnome, no, it isn't needed. Contrary to what it might seem, despite being part of the Gnome Project, Orca can run perfectly fine without this so heavy desktop environment. Below is a quick guide on how to install Orca on Slackware, &lt;strong&gt;without&lt;/strong&gt; Gnome: &lt;/p&gt;&lt;p&gt;&lt;a href="http://aiyumi.warpstar.net/en/blog/installing-orca-on-slackware-14-0/"&gt;more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><guid>http://aiyumi.warpstar.net/en/blog/installing-orca-on-slackware-14-0/</guid><pubDate>Sat, 28 Sep 2013 00:00:15 GMT</pubDate></item><item><title>A Basic Introduction to SoX</title><link>http://aiyumi.warpstar.net/en/blog/sox-basic-intro/</link><dc:creator>Aiyumi</dc:creator><description>&lt;div&gt;&lt;h4&gt;What is SoX?&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://sox.sourceforge.net/"&gt;SoX&lt;/a&gt; (Sound eXchange) is, as the author calls it, "the Swiss Army 
knife of sound processing programs". It is free, open source and runs under Windows, Mac and Linux.&lt;/p&gt;
&lt;p&gt;SoX can play, record, convert, edit, split, join and apply various effects to 
audio files of many different formats. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aiyumi.warpstar.net/en/blog/sox-basic-intro/"&gt;more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Audio</category><category>linux</category><guid>http://aiyumi.warpstar.net/en/blog/sox-basic-intro/</guid><pubDate>Fri, 09 Sep 2011 16:19:38 GMT</pubDate></item><item><title>A Small Status Update</title><link>http://aiyumi.warpstar.net/en/blog/status-update-2011-08-04/</link><dc:creator>Aiyumi</dc:creator><description>&lt;div&gt;&lt;p&gt;After upgrading Speech-Dispatcher, the Orca screen reader couldn't detect the Japanese voice synthesizer anymore. I thought it was because Orca's version was old, so I upgraded it along with AT-SPI, then Orca stopped working. Until this problem was solved, I stayed on the command line (console). I could do some interesting things in text mode, but unfortunately I couldn't use any screen reader with Japanese. Now, I've just managed to get Orca plus Japanese back, so I am writing this post.&lt;/p&gt;
&lt;p&gt;As for the problem that stopped Orca from working... It is said that AT-SPI1 and 2 can coexist peacefully in the same system, but here, their files got mixed for some reason and caused a conflict. I don't use AT-SPI1 for a long time, so I removed it. After compiling and installing the new AT-SPI2, some additional dependencies and Orca, everything seems to be back to normal.&lt;/p&gt;
&lt;p&gt;That's it for today. In other articles, I might talk about some of the interesting things that can be done on the console. For now, I'm glad I can use Japanese on the PC again!&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>Site Updates</category><guid>http://aiyumi.warpstar.net/en/blog/status-update-2011-08-04/</guid><pubDate>Thu, 04 Aug 2011 16:18:09 GMT</pubDate></item><item><title>How I Started Using Linux</title><link>http://aiyumi.warpstar.net/en/blog/how-i-started-using-linux/</link><dc:creator>Aiyumi</dc:creator><description>&lt;div&gt;&lt;p&gt;* Article in Portuguese&lt;/p&gt;
&lt;p&gt;On June 23rd, 2009, I published an article on the Slackware Users Group Brazil mailing list, talking about how I migrated from Windows to Linux.&lt;/p&gt;
&lt;p&gt;You can view the original version &lt;a href="http://groups.google.com/g/05e7fcc8/t/3ac5bdd6e5aafbe4/d/b3c85b56ff4ea1a0"&gt;here&lt;/a&gt;, in Portuguese. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aiyumi.warpstar.net/en/blog/how-i-started-using-linux/"&gt;more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><guid>http://aiyumi.warpstar.net/en/blog/how-i-started-using-linux/</guid><pubDate>Mon, 14 Mar 2011 23:51:36 GMT</pubDate></item></channel></rss>